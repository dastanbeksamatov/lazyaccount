mod account;
mod erc4337;
use alloy::network::EthereumWallet;
use alloy::providers::ProviderBuilder;
use alloy::signers::local::PrivateKeySigner;
use alloy::transports::http::reqwest::Url;
use serde::Deserialize;
use std::str::FromStr;
use std::sync::Arc;

type HttpProvider<'a> = alloy::providers::fillers::FillProvider<alloy::providers::fillers::JoinFill<alloy::providers::Identity, alloy::providers::fillers::WalletFiller<&'a EthereumWallet>>, alloy::providers::RootProvider<alloy::transports::http::Http<alloy::transports::http::Client>>, alloy::transports::http::Http<alloy::transports::http::Client>, alloy::network::Ethereum>;

#[derive(Debug, Deserialize, PartialEq, Eq)]
pub enum AccountType {
    Unknown,
}

pub struct SmartAccount<'a> {
    pub account_type: AccountType,
    pub provider: Arc<HttpProvider<'a>>
}


impl<'a> SmartAccount<'a> {
    pub fn new(url: Url, wallet: &'a EthereumWallet) -> Result<Self, Box<dyn std::error::Error>> {
        let provider: HttpProvider = ProviderBuilder::new().wallet(wallet).on_http(url);
        Ok(SmartAccount {
            account_type: AccountType::Unknown,
            provider: Arc::new(provider),
        })
    }
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("Hello, world!");
    let priv_key = "your_private_key_here"; // Replace with actual private key
                                            //
    let rpc_url = "http://localhost:8545";
    let signer = PrivateKeySigner::from_str(priv_key)?;
    let wallet = EthereumWallet::from(signer);
    let account = SmartAccount::new(rpc_url.parse()?, &wallet)?;
    println!("Account created: {:?}", account.account_type);
    Ok(())
}
